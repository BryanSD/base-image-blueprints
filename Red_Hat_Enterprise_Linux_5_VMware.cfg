# Install, not upgrade
install
cmdline

# Install from a friendly mirror and add updates
#url --url=http://intra.mirror.rackspace.com/kickstart/rhel-x86_64-server-5/
cdrom
#repo --name=base --baseurl=http://intra.mirror.rackspace.com/kickstart/rhel-x86_64-server-5/
#repo --name=epel --baseurl=http://mirror.rackspace.com/epel/5/x86_64/

# Language and keyboard setup
lang en_US.UTF-8
keyboard us

# skip entering license key
key --skip

# Configure DHCP networking w/optional IPv6, firewall on
network --device=eth0 --bootproto=dhcp --hostname=localhost --nameserver=INTERNAL_HOST

# Set timezone
timezone --utc Etc/UTC

# Authentication
# password expires after first login
rootpw rackspace
authconfig --enableshadow --passalgo=sha512

# SELinux
selinux --disabled

# Services running at boot
services --enabled network,sshd
services --disabled sendmail

# Disable anything graphical
skipx
text

# Setup the disk
zerombr
clearpart --all --initlabel
part / --fstype=ext3 --grow --size=1024 --asprimary
#bootloader --append="root=/dev/sda1 console=ttyS0,115200"
bootloader --append="root=/dev/sda1"

# Shutdown when the kickstart is done
#shutdown
poweroff

# Minimal package set
%packages --excludedocs --nobase
@core
kernel.x86_64
kernel-devel
yum
rsync
tar
wget
openssh-clients
openssh-server
parted
dhclient
rsyslog
e4fsprogs
perl
python
curl

%post --erroronfail
#!/bin/bash
exec < /dev/tty3 > /dev/tty3
chvt 3
echo
echo "################################"
echo "# Running Post Configuration   #"
echo "################################"
(
dhclient eth0

cat >> /etc/yum.repos.d/rhel-source.repo <<'EOF'
[rhel-source]
name=Red Hat Enterprise Linux $releasever - $basearch - Source
baseurl=http://intra.mirror.rackspace.com/kickstart/rhel-x86_64-server-5/
enabled=1
gpgcheck=0
EOF

# update all
yum -y update

# setup systemd to boot to the right runlevel
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target

# If you want to remove rsyslog and just use journald, remove this!
rmdir /var/log/journal/ 

# this is installed by default but we don't need it in virt
yum -C -y remove linux-firmware

# Non-firewalld-firewall
cat > /etc/sysconfig/iptables <<'EOF'
# Simple static firewall loaded by iptables.service. Replace
# this with your own custom rules, run lokkit, or switch to 
# shorewall or firewalld as your needs dictate.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
EOF

# although we want console output going to the serial console, we don't
# actually have the opportunity to login there. FIX.
# we don't really need to auto-spawn _any_ gettys.
sed -i '/^#NAutoVTs=.*/ a\
NAutoVTs=0' /etc/systemd/logind.conf

# initscripts don't like this file to be missing.
cat > /etc/sysconfig/network <<'EOF'
NETWORKING=yes
NOZEROCONF=yes
EOF

# For cloud images, 'eth0' _is_ the predictable device name, since
# we don't want to be tied to specific virtual (!) hardware
echo -n > /etc/udev/rules.d/70-persistent-net.rules
echo -n > /lib/udev/rules.d/75-persistent-net-generator.rules
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules

# simple eth0 config, again not hard-coded to the build hardware
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<'EOF'
DEVICE="eth0"
BOOTPROTO="static"
ONBOOT="yes"
TYPE="Ethernet"
EOF

# generic localhost names
cat > /etc/hosts <<'EOF'
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
EOF

# Because memory is scarce resource in most cloud/virt environments,
# and because this impedes forensics, we are differing from the Fedora
# default of having /tmp on tmpfs.
systemctl mask tmp.mount

# tmp tmp
mkdir /tmp/tmp
cd /tmp/tmp

# set some stuff
echo 'net.ipv4.conf.eth0.arp_notify = 1' >> /etc/sysctl.conf
echo 'vm.swappiness = 0' >> /etc/sysctl.conf

# install EPEL for the repo entries
wget http://mirror.rackspace.com/epel/5/i386/epel-release-5-4.noarch.rpm
rpm -Uvh epel-release*
yum -y install cloud-init cloud-utils cloud-utils-growpart

# set rackspace mirrors
sed -i 's%baseurl.*%baseurl=http://mirror.rackspace.com/epel/5/x86_64/%g' /etc/yum.repos.d/epel.repo
sed -i '/baseurl/s/# *//' /etc/yum.repos.d/epel.repo
sed -i '/mirrorlist/s/^/#/' /etc/yum.repos.d/epel.repo

# our cloud-init config
mkdir -p /etc/cloud/cloud.cfg.d/
cat > /etc/cloud/cloud.cfg.d/10_rackspace.cfg <<'EOF'
datasource_list: [ NoCloud, NoCloudNet, None ]
disable_root: False
ssh_pwauth: True
ssh_deletekeys: False
resize_rootfs: noblock
growpart:
  mode: auto
  devices: ['/']
system_info:
  distro: rhel
EOF

# use a static fstab
cat > /etc/fstab <<'EOF'
# Accessible filesystems, by reference, are maintained under '/dev/disk'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
LABEL=/	/ ext3 defaults,noatime 1 1
tmpfs /dev/shm tmpfs defaults 0 0
devpts /dev/pts devpts gid=5,mode=620 0 0
sysfs /sys sysfs defaults 0 0
proc /proc proc defaults 0 0
EOF

# make necessary paths
mkdir -p /root/.rackspace

# vmtools
wget http://packages.vmware.com/tools/keys/VMWARE-PACKAGING-GPG-DSA-KEY.pub
wget http://packages.vmware.com/tools/keys/VMWARE-PACKAGING-GPG-RSA-KEY.pub
#wget http://packages.vmware.com/tools/esx/5.5/repos/vmware-tools-repo-RHEL5-9.4.0-1.el5.x86_64.rpm
wget http://packages.vmware.com/tools/esx/5.5/repos/vmware-tools-repo-RHEL5-9.4.0-1.el5.x86_64.rpm
rpm --import VMWARE-PACKAGING-GPG-RSA-KEY.pub
rpm --import VMWARE-PACKAGING-GPG-DSA-KEY.pub
rpm -Uvh vmware-tools*
yum -y install vmware-tools-esx-kmods
yum -y install vmware-tools-esx

# dirty hack for NoCloud datasource fail
sed -i 's%cdrom_list = util.find_devs_with(path="/dev/sr1")%cdrom_list = util.find_devs_with(path="/dev/cdrom")%g' /usr/lib/python2.6/site-packages/cloudinit/sources/DataSourceNoCloud.py

# modprode workaround for vmware
cat > /etc/modprobe.conf <<'EOF'
alias eth0 pcnet32
alias scsi_hostadapter mptbase 
alias scsi_hostadapter1 mptscsih
EOF

# see this for explanation
# https://access.redhat.com/site/articles/16526
#echo "DMRAID=no" > /etc/sysconfig/mkinitrd/noraid 
#chmod 755 /etc/sysconfig/mkinitrd/noraid

# one last hack for 5.x so it gets along with VMware
version=$(rpm -q kernel --queryformat='%{VERSION}-%{RELEASE}\n' | tail -n 1)
#mkinitrd -v -f --rootdev=/dev/sda1 --with=scsi_mod --with=sd_mod --with=libata --with=pvscsi --with pcnet32 --with mptbase --with mptspi --with ata_piix --preload pcnet32 --preload mptbase --preload mptspi --preload ata_piix --preload=scsi_mod --preload=sd_mod --preload=libata initrd-$version.img $version
#mkinitrd -v -f --fstab=/etc/fstab --with=pvscsi --with pcnet32 --with mptbase --with mptspi --with ata_piix --with=scsi_mod --with=sd_mod --with=libata --preload=scsi_mod --preload=sd_mod --preload=libata --preload pcnet32 --preload mptbase --preload mptspi --preload ata_piix initrd-$version.img $version
# was the one below
mkinitrd -v -f --fstab=/etc/fstab --rootdev=/dev/sda1 --with=scsi_mod --with=sd_mod --with=libata --with pcnet32 --with mptbase --with mptspi --with ata_piix --preload pcnet32 --preload mptbase --preload mptspi --preload ata_piix --preload=scsi_mod --preload=sd_mod --preload=libata --without-dmraid /boot/initrd-$version.img $version

# force grub to use generic disk labels, bootloader above does not do this
#sed -i 's%root=.*%root=LABEL=/ root=/dev/sda1%g' /boot/grub/grub.conf
grub-install /dev/sda

version=$(rpm -q kernel --queryformat='%{VERSION}-%{RELEASE}\n' | tail -n 1)
cat > /boot/grub/grub.conf <<EOF
default=0
timeout=5
title Red Hat Enterprise Linux ($version)
root (hd0,0)
kernel /boot/vmlinuz-$version ro root=LABEL=/ root=/dev/sda1
initrd /boot/initrd-$version.img
EOF

# make sure repos are empty for rhel
for k in $(find /etc/yum.repos.d -type f\( ! -name "*epel*" \)); do rm -f $k; done
echo > /etc/yum.repos.d/rhel-source.repo

# package need for our RHN registration to work
wget http://dfw.rhn.rackspace.com/pub/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
rpm -Uvh rhn-org-trusted-ssl-cert*

# a few other random fixes
#rm /etc/blkid/blkid.tab
sed -i '/HOSTNAME.*/d' /etc/sysconfig/network

# force root pw change
chage -d 0 root

# log packages
wget http://KICK_HOST/kickstarts/package_postback.sh
bash package_postback.sh Red_Hat_Enterprise_Linux_5_VMware

# clean up
yum clean all
rm -f /root/anaconda-ks.cfg
rm -f /etc/ssh/ssh_host_*
rm -f /etc/resolv.conf
rm -f /root/.bash_history
rm -f /root/.nano_history
rm -f /root/.lesshst
rm -f /root/.ssh/known_hosts
rm -rf /tmp/tmp
for k in $(find /var/log -type f); do echo > $k; done
for k in $(find /tmp -type f); do rm -f $k; done
for k in $(find /root -type f \( ! -iname ".*" \)); do rm -f $k; done

echo "end"
) 2>&1 | /usr/bin/tee /root/post_install.log
chvt 1
